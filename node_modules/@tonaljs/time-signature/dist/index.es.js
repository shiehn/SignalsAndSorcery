// CONSTANTS
const NONE = {
    empty: true,
    name: "",
    upper: undefined,
    lower: undefined,
    type: undefined,
    additive: [],
};
const NAMES = ["4/4", "3/4", "2/4", "2/2", "12/8", "9/8", "6/8", "3/8"];
// PUBLIC API
function names() {
    return NAMES.slice();
}
const REGEX = /^(\d?\d(?:\+\d)*)\/(\d)$/;
const CACHE = new Map();
function get(literal) {
    const cached = CACHE.get(literal);
    if (cached) {
        return cached;
    }
    const ts = build(parse(literal));
    CACHE.set(literal, ts);
    return ts;
}
function parse(literal) {
    if (typeof literal === "string") {
        const [_, up, low] = REGEX.exec(literal) || [];
        return parse([up, low]);
    }
    const [up, down] = literal;
    const denominator = +down;
    if (typeof up === "number") {
        return [up, denominator];
    }
    const list = up.split("+").map((n) => +n);
    return list.length === 1 ? [list[0], denominator] : [list, denominator];
}
var index = { names, parse, get };
// PRIVATE
function build([up, down]) {
    const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;
    const lower = down;
    if (upper === 0 || lower === 0) {
        return NONE;
    }
    const name = Array.isArray(up) ? `${up.join("+")}/${down}` : `${up}/${down}`;
    const additive = Array.isArray(up) ? up : [];
    const type = lower === 4 || lower === 2
        ? "simple"
        : lower === 8 && upper % 3 === 0
            ? "compound"
            : "irregular";
    return {
        empty: false,
        name,
        type,
        upper,
        lower,
        additive,
    };
}

export default index;
export { get, names, parse };
//# sourceMappingURL=index.es.js.map
