import { note, transpose, altToAcc, accToAlt } from '@tonaljs/core';
import { transposeFifths } from '@tonaljs/note';
import { get } from '@tonaljs/roman-numeral';

const Empty = Object.freeze([]);
const NoKey = {
    type: "major",
    tonic: "",
    alteration: 0,
    keySignature: "",
};
const NoKeyScale = {
    tonic: "",
    grades: Empty,
    intervals: Empty,
    scale: Empty,
    chords: Empty,
    chordsHarmonicFunction: Empty,
    chordScales: Empty,
};
const NoMajorKey = {
    ...NoKey,
    ...NoKeyScale,
    type: "major",
    minorRelative: "",
    scale: Empty,
    secondaryDominants: Empty,
    secondaryDominantsMinorRelative: Empty,
    substituteDominants: Empty,
    substituteDominantsMinorRelative: Empty,
};
const NoMinorKey = {
    ...NoKey,
    type: "minor",
    relativeMajor: "",
    natural: NoKeyScale,
    harmonic: NoKeyScale,
    melodic: NoKeyScale,
};
const mapScaleToType = (scale, list, sep = "") => list.map((type, i) => `${scale[i]}${sep}${type}`);
function keyScale(grades, chords, harmonicFunctions, chordScales) {
    return (tonic) => {
        const intervals = grades.map((gr) => get(gr).interval || "");
        const scale = intervals.map((interval) => transpose(tonic, interval));
        return {
            tonic,
            grades,
            intervals,
            scale,
            chords: mapScaleToType(scale, chords),
            chordsHarmonicFunction: harmonicFunctions.slice(),
            chordScales: mapScaleToType(scale, chordScales, " "),
        };
    };
}
const distInFifths = (from, to) => {
    const f = note(from);
    const t = note(to);
    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];
};
const MajorScale = keyScale("I II III IV V VI VII".split(" "), "maj7 m7 m7 maj7 7 m7 m7b5".split(" "), "T SD T SD D T D".split(" "), "major,dorian,phrygian,lydian,mixolydian,minor,locrian".split(","));
const NaturalScale = keyScale("I II bIII IV V bVI bVII".split(" "), "m7 m7b5 maj7 m7 m7 maj7 7".split(" "), "T SD T SD D SD SD".split(" "), "minor,locrian,major,dorian,phrygian,lydian,mixolydian".split(","));
const HarmonicScale = keyScale("I II bIII IV V bVI VII".split(" "), "mMaj7 m7b5 +maj7 m7 7 maj7 o7".split(" "), "T SD T SD D SD D".split(" "), "harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian".split(","));
const MelodicScale = keyScale("I II bIII IV V VI VII".split(" "), "m6 m7 +maj7 7 7 m7b5 m7b5".split(" "), "T SD T SD D  ".split(" "), "melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered".split(","));
/**
 * Get a major key properties in a given tonic
 * @param tonic
 */
function majorKey(tonic) {
    const pc = note(tonic).pc;
    if (!pc)
        return NoMajorKey;
    const keyScale = MajorScale(pc);
    const alteration = distInFifths("C", pc);
    const romanInTonic = (src) => {
        const r = get(src);
        if (r.empty)
            return "";
        return transpose(tonic, r.interval) + r.chordType;
    };
    return {
        ...keyScale,
        type: "major",
        minorRelative: transpose(pc, "-3m"),
        alteration,
        keySignature: altToAcc(alteration),
        secondaryDominants: "- VI7 VII7 I7 II7 III7 -".split(" ").map(romanInTonic),
        secondaryDominantsMinorRelative: "- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -"
            .split(" ")
            .map(romanInTonic),
        substituteDominants: "- bIII7 IV7 bV7 bVI7 bVII7 -"
            .split(" ")
            .map(romanInTonic),
        substituteDominantsMinorRelative: "- IIIm7 Im7 IIbm7 VIm7 IVm7 -"
            .split(" ")
            .map(romanInTonic),
    };
}
/**
 * Get minor key properties in a given tonic
 * @param tonic
 */
function minorKey(tnc) {
    const pc = note(tnc).pc;
    if (!pc)
        return NoMinorKey;
    const alteration = distInFifths("C", pc) - 3;
    return {
        type: "minor",
        tonic: pc,
        relativeMajor: transpose(pc, "3m"),
        alteration,
        keySignature: altToAcc(alteration),
        natural: NaturalScale(pc),
        harmonic: HarmonicScale(pc),
        melodic: MelodicScale(pc),
    };
}
/**
 * Given a key signature, returns the tonic of the major key
 * @param sigature
 * @example
 * majorTonicFromKeySignature('###') // => 'A'
 */
function majorTonicFromKeySignature(sig) {
    if (typeof sig === "number") {
        return transposeFifths("C", sig);
    }
    else if (typeof sig === "string" && /^b+|#+$/.test(sig)) {
        return transposeFifths("C", accToAlt(sig));
    }
    return null;
}
var index = { majorKey, majorTonicFromKeySignature, minorKey };

export { index as default, majorKey, majorTonicFromKeySignature, minorKey };
//# sourceMappingURL=index.es.js.map
