import { rotate } from '@tonaljs/collection';
import { deprecate, transpose } from '@tonaljs/core';
import { simplify, transposeFifths } from '@tonaljs/interval';
import { EmptyPcset } from '@tonaljs/pcset';
import { get as get$1 } from '@tonaljs/scale-type';

const MODES = [
    [0, 2773, 0, "ionian", "", "Maj7", "major"],
    [1, 2902, 2, "dorian", "m", "m7"],
    [2, 3418, 4, "phrygian", "m", "m7"],
    [3, 2741, -1, "lydian", "", "Maj7"],
    [4, 2774, 1, "mixolydian", "", "7"],
    [5, 2906, 3, "aeolian", "m", "m7", "minor"],
    [6, 3434, 5, "locrian", "dim", "m7b5"],
];
const NoMode = {
    ...EmptyPcset,
    name: "",
    alt: 0,
    modeNum: NaN,
    triad: "",
    seventh: "",
    aliases: [],
};
const modes = MODES.map(toMode);
const index = {};
modes.forEach((mode) => {
    index[mode.name] = mode;
    mode.aliases.forEach((alias) => {
        index[alias] = mode;
    });
});
/**
 * Get a Mode by it's name
 *
 * @example
 * get('dorian')
 * // =>
 * // {
 * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],
 * //   modeNum: 1,
 * //   chroma: '101101010110',
 * //   normalized: '101101010110',
 * //   name: 'dorian',
 * //   setNum: 2902,
 * //   alt: 2,
 * //   triad: 'm',
 * //   seventh: 'm7',
 * //   aliases: []
 * // }
 */
function get(name) {
    return typeof name === "string"
        ? index[name.toLowerCase()] || NoMode
        : name && name.name
            ? get(name.name)
            : NoMode;
}
const mode = deprecate("Mode.mode", "Mode.get", get);
/**
 * Get a list of all modes
 */
function all() {
    return modes.slice();
}
const entries = deprecate("Mode.mode", "Mode.all", all);
/**
 * Get a list of all mode names
 */
function names() {
    return modes.map((mode) => mode.name);
}
function toMode(mode) {
    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;
    const aliases = alias ? [alias] : [];
    const chroma = Number(setNum).toString(2);
    const intervals = get$1(name).intervals;
    return {
        empty: false,
        intervals,
        modeNum,
        chroma,
        normalized: chroma,
        name,
        setNum,
        alt,
        triad,
        seventh,
        aliases,
    };
}
function notes(modeName, tonic) {
    return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));
}
function chords(chords) {
    return (modeName, tonic) => {
        const mode = get(modeName);
        if (mode.empty)
            return [];
        const triads = rotate(mode.modeNum, chords);
        const tonics = mode.intervals.map((i) => transpose(tonic, i));
        return triads.map((triad, i) => tonics[i] + triad);
    };
}
const triads = chords(MODES.map((x) => x[4]));
const seventhChords = chords(MODES.map((x) => x[5]));
function distance(destination, source) {
    const from = get(source);
    const to = get(destination);
    if (from.empty || to.empty)
        return "";
    return simplify(transposeFifths("1P", to.alt - from.alt));
}
function relativeTonic(destination, source, tonic) {
    return transpose(tonic, distance(destination, source));
}
var index$1 = {
    get,
    names,
    all,
    distance,
    relativeTonic,
    notes,
    triads,
    seventhChords,
    // deprecated
    entries,
    mode,
};

export { all, index$1 as default, distance, entries, get, mode, names, notes, relativeTonic, seventhChords, triads };
//# sourceMappingURL=index.es.js.map
