import { Named, NoteName } from "@tonaljs/core";
import { Pcset } from "@tonaljs/pcset";
export interface Mode extends Pcset {
    readonly name: string;
    readonly modeNum: number;
    readonly alt: number;
    readonly triad: string;
    readonly seventh: string;
    readonly aliases: string[];
}
declare type ModeLiteral = string | Named;
/**
 * Get a Mode by it's name
 *
 * @example
 * get('dorian')
 * // =>
 * // {
 * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],
 * //   modeNum: 1,
 * //   chroma: '101101010110',
 * //   normalized: '101101010110',
 * //   name: 'dorian',
 * //   setNum: 2902,
 * //   alt: 2,
 * //   triad: 'm',
 * //   seventh: 'm7',
 * //   aliases: []
 * // }
 */
export declare function get(name: ModeLiteral): Mode;
export declare const mode: (this: unknown, ...args: unknown[]) => Mode;
/**
 * Get a list of all modes
 */
export declare function all(): Mode[];
export declare const entries: (this: unknown, ...args: unknown[]) => Mode[];
/**
 * Get a list of all mode names
 */
export declare function names(): string[];
export declare function notes(modeName: ModeLiteral, tonic: NoteName): string[];
export declare const triads: (modeName: ModeLiteral, tonic: NoteName) => string[];
export declare const seventhChords: (modeName: ModeLiteral, tonic: NoteName) => string[];
export declare function distance(destination: ModeLiteral, source: ModeLiteral): string;
export declare function relativeTonic(destination: ModeLiteral, source: ModeLiteral, tonic: NoteName): string;
declare const _default: {
    get: typeof get;
    names: typeof names;
    all: typeof all;
    distance: typeof distance;
    relativeTonic: typeof relativeTonic;
    notes: typeof notes;
    triads: (modeName: ModeLiteral, tonic: string) => string[];
    seventhChords: (modeName: ModeLiteral, tonic: string) => string[];
    entries: (this: unknown, ...args: unknown[]) => Mode[];
    mode: (this: unknown, ...args: unknown[]) => Mode;
};
export default _default;
