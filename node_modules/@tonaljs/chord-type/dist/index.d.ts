import { Pcset, PcsetChroma, PcsetNum } from "@tonaljs/pcset";
export declare type ChordQuality = "Major" | "Minor" | "Augmented" | "Diminished" | "Unknown";
export interface ChordType extends Pcset {
    name: string;
    quality: ChordQuality;
    aliases: string[];
}
declare type ChordTypeName = string | PcsetChroma | PcsetNum;
/**
 * Given a chord name or chroma, return the chord properties
 * @param {string} source - chord name or pitch class set chroma
 * @example
 * import { get } from 'tonaljs/chord-type'
 * get('major') // => { name: 'major', ... }
 */
export declare function get(type: ChordTypeName): ChordType;
export declare const chordType: (this: unknown, ...args: unknown[]) => ChordType;
/**
 * Get all chord (long) names
 */
export declare function names(): string[];
/**
 * Get all chord symbols
 */
export declare function symbols(): string[];
/**
 * Keys used to reference chord types
 */
export declare function keys(): string[];
/**
 * Return a list of all chord types
 */
export declare function all(): ChordType[];
export declare const entries: (this: unknown, ...args: unknown[]) => ChordType[];
/**
 * Clear the dictionary
 */
export declare function removeAll(): void;
/**
 * Add a chord to the dictionary.
 * @param intervals
 * @param aliases
 * @param [fullName]
 */
export declare function add(intervals: string[], aliases: string[], fullName?: string): void;
export declare function addAlias(chord: ChordType, alias: string): void;
declare const _default: {
    names: typeof names;
    symbols: typeof symbols;
    get: typeof get;
    all: typeof all;
    add: typeof add;
    removeAll: typeof removeAll;
    keys: typeof keys;
    entries: (this: unknown, ...args: unknown[]) => ChordType[];
    chordType: (this: unknown, ...args: unknown[]) => ChordType;
};
export default _default;
