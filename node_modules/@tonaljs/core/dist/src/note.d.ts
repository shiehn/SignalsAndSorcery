import { Named } from "./named";
import { Pitch, PitchCoordinates } from "./pitch";
export declare type NoteWithOctave = string;
export declare type PcName = string;
export declare type NoteName = NoteWithOctave | PcName;
export declare type NoteLiteral = NoteName | Pitch | Named;
export interface Note extends Pitch, Named {
    readonly empty: boolean;
    readonly name: NoteName;
    readonly letter: string;
    readonly acc: string;
    readonly pc: PcName;
    readonly chroma: number;
    readonly height: number;
    readonly coord: PitchCoordinates;
    readonly midi: number | null;
    readonly freq: number | null;
}
export interface NoNote extends Partial<Note> {
    empty: true;
    name: "";
    pc: "";
    acc: "";
}
export declare const stepToLetter: (step: number) => string;
export declare const altToAcc: (alt: number) => string;
export declare const accToAlt: (acc: string) => number;
/**
 * Given a note literal (a note name or a note object), returns the Note object
 * @example
 * note('Bb4') // => { name: "Bb4", midi: 70, chroma: 10, ... }
 */
export declare function note(src: NoteLiteral): Note | NoNote;
declare type NoteTokens = [string, string, string, string];
/**
 * @private
 */
export declare function tokenizeNote(str: string): NoteTokens;
/**
 * @private
 */
export declare function coordToNote(noteCoord: PitchCoordinates): Note;
export {};
