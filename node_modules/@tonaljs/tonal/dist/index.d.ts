import AbcNotation from "@tonaljs/abc-notation";
import * as Array from "@tonaljs/array";
import Chord from "@tonaljs/chord";
import ChordType from "@tonaljs/chord-type";
import Collection from "@tonaljs/collection";
import * as Core from "@tonaljs/core";
import DurationValue from "@tonaljs/duration-value";
import Interval from "@tonaljs/interval";
import Key from "@tonaljs/key";
import Midi from "@tonaljs/midi";
import Mode from "@tonaljs/mode";
import Note from "@tonaljs/note";
import Pcset from "@tonaljs/pcset";
import Progression from "@tonaljs/progression";
import Range from "@tonaljs/range";
import RomanNumeral from "@tonaljs/roman-numeral";
import Scale from "@tonaljs/scale";
import ScaleType from "@tonaljs/scale-type";
import TimeSignature from "@tonaljs/time-signature";
export * from "@tonaljs/core";
declare const Tonal: typeof Core;
declare const PcSet: {
    get: typeof import("@tonaljs/pcset").get;
    chroma: (set: import("@tonaljs/pcset").Set) => string;
    num: (set: import("@tonaljs/pcset").Set) => number;
    intervals: (set: import("@tonaljs/pcset").Set) => string[];
    chromas: typeof import("@tonaljs/pcset").chromas;
    isSupersetOf: typeof import("@tonaljs/pcset").isSupersetOf;
    isSubsetOf: typeof import("@tonaljs/pcset").isSubsetOf;
    isNoteIncludedIn: typeof import("@tonaljs/pcset").isNoteIncludedIn;
    isEqual: typeof import("@tonaljs/pcset").isEqual;
    filter: typeof import("@tonaljs/pcset").filter;
    modes: typeof import("@tonaljs/pcset").modes;
    pcset: (this: unknown, ...args: unknown[]) => import("@tonaljs/pcset").Pcset;
};
declare const ChordDictionary: {
    names: typeof import("@tonaljs/chord-type").names;
    symbols: typeof import("@tonaljs/chord-type").symbols;
    get: typeof import("@tonaljs/chord-type").get;
    all: typeof import("@tonaljs/chord-type").all;
    add: typeof import("@tonaljs/chord-type").add;
    removeAll: typeof import("@tonaljs/chord-type").removeAll;
    keys: typeof import("@tonaljs/chord-type").keys;
    entries: (this: unknown, ...args: unknown[]) => import("@tonaljs/chord-type").ChordType[];
    chordType: (this: unknown, ...args: unknown[]) => import("@tonaljs/chord-type").ChordType;
};
declare const ScaleDictionary: {
    names: typeof import("@tonaljs/scale-type").names;
    get: typeof import("@tonaljs/scale-type").get;
    all: typeof import("@tonaljs/scale-type").all;
    add: typeof import("@tonaljs/scale-type").add;
    removeAll: typeof import("@tonaljs/scale-type").removeAll;
    keys: typeof import("@tonaljs/scale-type").keys;
    entries: (this: unknown, ...args: unknown[]) => import("@tonaljs/scale-type").ScaleType[];
    scaleType: (this: unknown, ...args: unknown[]) => import("@tonaljs/scale-type").ScaleType;
};
export { AbcNotation, Array, Chord, ChordType, Collection, Core, DurationValue, Note, Interval, Key, Midi, Mode, Pcset, Progression, Range, RomanNumeral, Scale, ScaleType, TimeSignature, Tonal, PcSet, ChordDictionary, ScaleDictionary, };
