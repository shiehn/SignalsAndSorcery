import { IntervalName, Note, note as props, NoteLiteral, NoteName, Pitch, transpose as _tr } from "@tonaljs/core";
/**
 * Return the natural note names without octave
 * @function
 * @example
 * Note.names(); // => ["C", "D", "E", "F", "G", "A", "B"]
 */
export declare function names(array?: any[]): string[];
/**
 * Get a note from a note name
 *
 * @function
 * @example
 * Note.get('Bb4') // => { name: "Bb4", midi: 70, chroma: 10, ... }
 */
export declare const get: typeof props;
/**
 * Get the note name
 * @function
 */
export declare const name: (note: NoteLiteral) => string;
/**
 * Get the note pitch class name
 * @function
 */
export declare const pitchClass: (note: NoteLiteral) => string;
/**
 * Get the note accidentals
 * @function
 */
export declare const accidentals: (note: NoteLiteral) => string;
/**
 * Get the note octave
 * @function
 */
export declare const octave: (note: NoteLiteral) => number | undefined;
/**
 * Get the note midi
 * @function
 */
export declare const midi: (note: NoteLiteral) => number | null | undefined;
/**
 * Get the note midi
 * @function
 */
export declare const freq: (note: NoteLiteral) => number | null | undefined;
/**
 * Get the note chroma
 * @function
 */
export declare const chroma: (note: NoteLiteral) => number | undefined;
/**
 * Given a midi number, returns a note name. Uses flats for altered notes.
 *
 * @function
 * @param {number} midi - the midi note number
 * @return {string} the note name
 * @example
 * Note.fromMidi(61) // => "Db4"
 * Note.fromMidi(61.7) // => "D4"
 */
export declare function fromMidi(midi: number): string;
/**
 * Given a midi number, returns a note name. Uses flats for altered notes.
 */
export declare function fromFreq(freq: number): string;
/**
 * Given a midi number, returns a note name. Uses flats for altered notes.
 */
export declare function fromFreqSharps(freq: number): string;
/**
 * Given a midi number, returns a note name. Uses flats for altered notes.
 *
 * @function
 * @param {number} midi - the midi note number
 * @return {string} the note name
 * @example
 * Note.fromMidiSharps(61) // => "C#4"
 */
export declare function fromMidiSharps(midi: number): string;
/**
 * Transpose a note by an interval
 */
export declare const transpose: typeof _tr;
export declare const tr: typeof _tr;
/**
 * Transpose by an interval.
 * @function
 * @param {string} interval
 * @return {function} a function that transposes by the given interval
 * @example
 * ["C", "D", "E"].map(Note.transposeBy("5P"));
 * // => ["G", "A", "B"]
 */
export declare const transposeBy: (interval: IntervalName) => (note: NoteName) => string;
export declare const trBy: (interval: IntervalName) => (note: NoteName) => string;
/**
 * Transpose from a note
 * @function
 * @param {string} note
 * @return {function}  a function that transposes the the note by an interval
 * ["1P", "3M", "5P"].map(Note.transposeFrom("C"));
 * // => ["C", "E", "G"]
 */
export declare const transposeFrom: (note: NoteName) => (interval: IntervalName) => string;
export declare const trFrom: (note: NoteName) => (interval: IntervalName) => string;
/**
 * Transpose a note by a number of perfect fifths.
 *
 * @function
 * @param {string} note - the note name
 * @param {number} fifhts - the number of fifths
 * @return {string} the transposed note name
 *
 * @example
 * import { transposeFifths } from "@tonaljs/note"
 * transposeFifths("G4", 1) // => "D"
 * [0, 1, 2, 3, 4].map(fifths => transposeFifths("C", fifths)) // => ["C", "G", "D", "A", "E"]
 */
export declare function transposeFifths(noteName: NoteName, fifths: number): NoteName;
export declare const trFifths: typeof transposeFifths;
export declare type NoteComparator = (a: Note, b: Note) => number;
export declare const ascending: NoteComparator;
export declare const descending: NoteComparator;
export declare function sortedNames(notes: any[], comparator?: NoteComparator): string[];
export declare function sortedUniqNames(notes: any[]): string[];
/**
 * Simplify a note
 *
 * @function
 * @param {string} note - the note to be simplified
 * - sameAccType: default true. Use same kind of accidentals that source
 * @return {string} the simplified note or '' if not valid note
 * @example
 * simplify("C##") // => "D"
 * simplify("C###") // => "D#"
 * simplify("C###")
 * simplify("B#4") // => "C5"
 */
export declare const simplify: (noteName: NoteName | Pitch) => string;
/**
 * Get enharmonic of a note
 *
 * @function
 * @param {string} note
 * @param [string] - [optional] Destination pitch class
 * @return {string} the enharmonic note name or '' if not valid note
 * @example
 * Note.enharmonic("Db") // => "C#"
 * Note.enharmonic("C") // => "C"
 * Note.enharmonic("F2","E#") // => "E#2"
 */
export declare function enharmonic(noteName: string, destName?: string): string;
declare const _default: {
    names: typeof names;
    get: typeof props;
    name: (note: NoteLiteral) => string;
    pitchClass: (note: NoteLiteral) => string;
    accidentals: (note: NoteLiteral) => string;
    octave: (note: NoteLiteral) => number | undefined;
    midi: (note: NoteLiteral) => number | null | undefined;
    ascending: NoteComparator;
    descending: NoteComparator;
    sortedNames: typeof sortedNames;
    sortedUniqNames: typeof sortedUniqNames;
    fromMidi: typeof fromMidi;
    fromMidiSharps: typeof fromMidiSharps;
    freq: (note: NoteLiteral) => number | null | undefined;
    fromFreq: typeof fromFreq;
    fromFreqSharps: typeof fromFreqSharps;
    chroma: (note: NoteLiteral) => number | undefined;
    transpose: typeof _tr;
    tr: typeof _tr;
    transposeBy: (interval: string) => (note: string) => string;
    trBy: (interval: string) => (note: string) => string;
    transposeFrom: (note: string) => (interval: string) => string;
    trFrom: (note: string) => (interval: string) => string;
    transposeFifths: typeof transposeFifths;
    trFifths: typeof transposeFifths;
    simplify: (noteName: string | Pitch) => string;
    enharmonic: typeof enharmonic;
};
export default _default;
