import { Named, Pitch } from "@tonaljs/core";
export interface RomanNumeral extends Pitch, Named {
    readonly empty: boolean;
    readonly roman: string;
    readonly interval: string;
    readonly acc: string;
    readonly chordType: string;
    readonly major: boolean;
    readonly dir: 1;
}
export interface NoRomanNumeral extends Partial<RomanNumeral> {
    readonly empty: true;
    readonly name: "";
    readonly chordType: "";
}
/**
 * Get properties of a roman numeral string
 *
 * @function
 * @param {string} - the roman numeral string (can have type, like: Imaj7)
 * @return {Object} - the roman numeral properties
 * @param {string} name - the roman numeral (tonic)
 * @param {string} type - the chord type
 * @param {string} num - the number (1 = I, 2 = II...)
 * @param {boolean} major - major or not
 *
 * @example
 * romanNumeral("VIIb5") // => { name: "VII", type: "b5", num: 7, major: true }
 */
export declare function get(src: any): RomanNumeral | NoRomanNumeral;
/**
 * Get roman numeral names
 *
 * @function
 * @param {boolean} [isMajor=true]
 * @return {Array<String>}
 *
 * @example
 * names() // => ["I", "II", "III", "IV", "V", "VI", "VII"]
 */
export declare function names(major?: boolean): string[];
declare type RomanNumeralTokens = [string, string, string, string];
export declare function tokenize(str: string): RomanNumeralTokens;
declare const _default: {
    names: typeof names;
    get: typeof get;
    romanNumeral: (this: unknown, ...args: unknown[]) => RomanNumeral | NoRomanNumeral;
};
export default _default;
