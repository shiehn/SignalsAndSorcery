"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatefrontend"]("main",{

/***/ "./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/components/ComposerControls.vue?vue&type=script&lang=js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/components/ComposerControls.vue?vue&type=script&lang=js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vue */ \"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! vue */ \"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\");\n/* harmony import */ var _events_eventBus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/eventBus */ \"./src/events/eventBus.js\");\n/* harmony import */ var _ComposerControlsScrollBar_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ComposerControlsScrollBar.vue */ \"./src/components/ComposerControlsScrollBar.vue\");\n/* harmony import */ var _GlobalTrackValues__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GlobalTrackValues */ \"./src/components/GlobalTrackValues.vue\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: \"ComposerControls\",\n  components: {ComposerControlsScrollBar: _ComposerControlsScrollBar_vue__WEBPACK_IMPORTED_MODULE_1__[\"default\"], GlobalTrackValues: _GlobalTrackValues__WEBPACK_IMPORTED_MODULE_2__[\"default\"]},\n  setup() {\n    const store = (0,vue__WEBPACK_IMPORTED_MODULE_4__.inject)('store')\n    const {bus, emit} = (0,_events_eventBus__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\n    const requiresRender = (0,vue__WEBPACK_IMPORTED_MODULE_5__.ref)(false)\n    const toast = (0,vue__WEBPACK_IMPORTED_MODULE_4__.inject)('toast');\n\n    let BUFFER_CACHE = {}\n    let BUFFER_ROW_CACHE = []\n\n    let context = undefined\n    let sourceNode = undefined;\n    let buffer = undefined;\n    let startedAt = 0\n    let pausedAt = 0\n    const isPlaying = (0,vue__WEBPACK_IMPORTED_MODULE_5__.ref)(false)\n    const isRendering = (0,vue__WEBPACK_IMPORTED_MODULE_5__.ref)(false)\n\n    const imageAssets = {\n      playBtn: store.state.staticUrl + 'icons/play-button.png',\n      pauseBtn: store.state.staticUrl + 'icons/pause-button.png',\n      stopBtn: store.state.staticUrl + 'icons/stop-button.png',\n      downloadBtn: store.state.staticUrl + 'icons/download-icon.svg',\n    }\n\n    const getTrackListByRow = (row) => {\n      const tracks = store.state.grid[row].value.map((t) => {\n        if (t.source) {\n          return t.source.replace('.wav', '.mp3')\n        }\n        return t.source\n      })\n\n      return tracks\n    }\n\n    const getLoopLengthFromBarsAndBPM = (barCount, bpm) => {\n      let msPerBeatAtBpm = 60000 / bpm;\n      let totalBeats = 4 * barCount;\n      return msPerBeatAtBpm * totalBeats / 1000\n    }\n\n    const getBufferInRow = async (actx, trackSourceUrls, emptyBuffer) => {\n      let buffer_list = new Array();\n      for (let x = 0; x < trackSourceUrls.length; x++) {\n        if (trackSourceUrls[x]) {\n          // if (BUFFER_CACHE[trackSourceUrls[x]]) {\n          //   buffer_list[x] = BUFFER_CACHE[trackSourceUrls[x]]\n          // } else {\n          await new Promise(function (resolve) {\n            axios__WEBPACK_IMPORTED_MODULE_3___default().get(trackSourceUrls[x], {\n              responseType: 'arraybuffer'\n            }).then(function (response) {\n              let audioData = response.data;\n              if (audioData) {\n                actx.decodeAudioData(audioData, function (buffer) {\n                      buffer_list[x] = buffer;\n                      resolve()\n                    },\n                    function (e) {\n                      console.log(e.err);\n                    });\n              } else {\n                console.error(\"problem!!\");\n              }\n            })\n                .catch(function (error) {\n                  console.error(\"problem!! downloading \" + error);\n                })\n          })\n\n          // BUFFER_CACHE[trackSourceUrls[x]] = buffer\n          // }\n        } else {\n          buffer_list[x] = emptyBuffer;\n        }\n      }\n\n      return buffer_list;\n    }\n\n    const mixDown = (context, rowBufferList, totalLength) => {\n      const numberOfChannels = 2\n      //create a buffer using the totalLength and sampleRate of the first buffer node\n      let finalMix = context.createBuffer(numberOfChannels, totalLength, rowBufferList[0].sampleRate);\n\n      //first loop for row buffer list\n      for (let i = 0; i < rowBufferList.length; i++) {\n        // second loop for each channel ie left and right\n        //here we get a reference to the final mix buffer data\n        const leftChannel = 0\n        const rightChannel = 1\n\n        let finalMixBufferLeft = finalMix.getChannelData(leftChannel);\n        let finalMixBufferRight = finalMix.getChannelData(rightChannel);\n\n        //last is loop for updating/summing the track buffer with the final mix buffer\n\n        let rowBufferChannelLeft = rowBufferList[i].getChannelData(leftChannel)\n        let rowBufferChannelRight = rowBufferList[i].getChannelData(rightChannel)\n        for (let j = 0; j < rowBufferList[i].length; j++) {\n          finalMixBufferLeft[j] += rowBufferChannelLeft[j]\n          finalMixBufferRight[j] += rowBufferChannelRight[j];\n        }\n      }\n\n      return finalMix;\n    }\n\n    const generateEmptyBuffer = (actx, frameCount, sampleRate) => {\n      //THIS IS LIKELY SILENCE SO GENERATE AN EMPTY BUFFER\n      let emptyBuffer = actx.createBuffer(2, frameCount, sampleRate);\n      for (let channel = 0; channel < emptyBuffer.numberOfChannels; channel++) {\n        let nowBuffering = emptyBuffer.getChannelData(channel);\n        for (let i = 0; i < emptyBuffer.length; i++) {\n          nowBuffering[i] = 0;\n        }\n      }\n      return emptyBuffer;\n    }\n\n\n    const renderMix = async () => {\n      await stop()\n\n      if (store.state.clipCount() < 1) {\n        return\n      }\n\n      isRendering.value = true\n      try {\n        /* load audio buffers - start */\n        try {\n          if (context) {\n            try {\n              if (context.state !== 'closed') {\n                await context.close();\n              }\n            } catch (e) {\n              console.log('Unable to close WebAudio Context');\n            }\n          }\n          let AudioContext = window.AudioContext || window.webkitAudioContext;\n          context = new AudioContext();\n          try {\n            await context.resume()\n          } catch (e) {\n            console.log('Error resuming WebAudio Context');\n          }\n        } catch (e) {\n          console.log('WebAudio api is not supported!!');\n        }\n\n        let secondsInLoop = getLoopLengthFromBarsAndBPM(4, store.state.globalBpm);\n        const bufferSizePerLoop = secondsInLoop * 44100;\n\n        const leftChannel = 0\n        const rightChannel = 1\n        const numOfRows = 4;\n        let listOfTrimmedRowBuffers = new Array(numOfRows);\n\n        let emptyBuffer = generateEmptyBuffer(context, bufferSizePerLoop, 44100)\n\n        //ALL THIS ROW STUFF COULD BE A FUNC\n        for (let n = 0; n < numOfRows; n++) {\n          //CHECK IF THE ROW IS ALREADY CACHED\n          if (!store.state.hasRowStateChanged(n) && BUFFER_ROW_CACHE[n]) {\n            console.log(\"ROW IS IN CACHED!!\")\n            listOfTrimmedRowBuffers[n] = BUFFER_ROW_CACHE[n]\n            continue\n          }\n\n          //GET THE TRACKS IN ONE ROW\n          let tracksInRow = getTrackListByRow(n)\n          // console.log('tracksInRow_' + n, tracksInRow)\n\n          //GET THE BUFFERS FOR ONE ROW\n          let buffer_list_row = await getBufferInRow(context, tracksInRow, emptyBuffer);\n\n          //TRIM THE BUFFERS IN EACH ROW\n          //TRIM THE BUFFERS IN EACH ROW\n          //TRIM THE BUFFERS IN EACH ROW\n          //TODO IF YOU PRE-TRIM THESE YOU CAN SAVE RENDER TIME\n          let trimmedBufferListRow = new Array(buffer_list_row.length)\n          for (let i = 0; i < buffer_list_row.length; i++) {\n            // Create an empty buffer at the target length\n            let newBuffer = context.createBuffer(2, bufferSizePerLoop, 44100);\n\n            // for (let channel = 0; channel < 2; channel++) {\n            // This gives us the actual array that contains the data\n            let oldBufferLeft = buffer_list_row[i].getChannelData(leftChannel)\n            let oldBufferRight = buffer_list_row[i].getChannelData(rightChannel)\n\n            let nowBufferingLeft = newBuffer.getChannelData(leftChannel);\n            let nowBufferingRight = newBuffer.getChannelData(rightChannel);\n\n            for (let j = 0; j < newBuffer.length; j++) {\n              nowBufferingLeft[j] = oldBufferLeft[j];\n              nowBufferingRight[j] = oldBufferRight[j];\n            }\n            // }\n\n            trimmedBufferListRow[i] = newBuffer\n          }\n\n          //MERGE ALL THE BUFFERS FOR A ROW\n          //MERGE ALL THE BUFFERS FOR A ROW\n          // MERGE ALL THE BUFFERS FOR A ROW\n          let finalRowBuffer = context.createBuffer(2, bufferSizePerLoop * trimmedBufferListRow.length, 44100);\n\n          let nowBufferingFinalRowLeft = finalRowBuffer.getChannelData(leftChannel);\n          let nowBufferingFinalRowRight = finalRowBuffer.getChannelData(rightChannel);\n\n          let finalRowBufferIdx = 0;\n          for (let i = 0; i < trimmedBufferListRow.length; i++) {\n            let oldBufferLeft = trimmedBufferListRow[i].getChannelData(leftChannel)\n            let oldBufferRight = trimmedBufferListRow[i].getChannelData(rightChannel)\n            for (let j = 0; j < oldBufferLeft.length; j++) {\n              nowBufferingFinalRowLeft[finalRowBufferIdx] = oldBufferLeft[j];\n              nowBufferingFinalRowRight[finalRowBufferIdx] = oldBufferRight[j];\n              finalRowBufferIdx = finalRowBufferIdx + 1\n            }\n          }\n\n          listOfTrimmedRowBuffers[n] = finalRowBuffer\n\n          //UPDATE THE ROW CACHE\n          BUFFER_ROW_CACHE[n] = finalRowBuffer\n          store.state.updateRowStateHash(n)\n        }\n\n        buffer = mixDown(context, listOfTrimmedRowBuffers, listOfTrimmedRowBuffers[0].length);\n      } catch (e) {\n        console.log('ERROR', e)\n      }\n\n      isRendering.value = false\n\n\n      store.state.updateStateHash()\n\n      //emit('renderMixIfNeeded')\n\n\n      console.timeEnd('FULL_RENDER')\n    }\n\n    const playClip = async () => {\n      await stop()\n    }\n\n    const playMix = async (offsetStartPercentage) => {\n      if (store.state.clipCount() < 1) {\n        toast.warning('Add clips to the arranger!');\n        return\n      }\n\n      emit('stopAllAudio', 'composer-controls')\n\n      if (buffer) {\n        let offset = pausedAt;\n\n        if (offsetStartPercentage && offsetStartPercentage > 0 && offsetStartPercentage <= 100) {\n          offset = buffer.duration * (offsetStartPercentage * 0.01)\n        }\n\n        sourceNode = context.createBufferSource();\n        sourceNode.buffer = buffer\n        sourceNode.connect(context.destination);\n        sourceNode.start(0, offset);\n        startedAt = context.currentTime - offset;\n        pausedAt = 0;\n        isPlaying.value = true;\n      } else {\n        await renderMix()\n        await playMix()\n      }\n    }\n\n    const stop = async () => {\n      if (sourceNode) {\n        sourceNode.disconnect();\n        sourceNode.stop(0);\n        sourceNode = null;\n      }\n      pausedAt = 0;\n      startedAt = 0;\n      isPlaying.value = false;\n    }\n\n    const pause = async () => {\n      let elapsed = context.currentTime - startedAt;\n      stop();\n      pausedAt = elapsed;\n    }\n\n    let getCurrentTime = () => {\n      if (pausedAt) {\n        return pausedAt;\n      }\n      if (startedAt) {\n        return context.currentTime - startedAt;\n      }\n      return 0;\n    };\n\n    let getDuration = () => {\n      if (buffer) {\n        return buffer.duration;\n      }\n      return 0;\n    };\n\n    const printPlayState = async () => {\n      console.log('STATE: actx:', context)\n\n      if (context) {\n        console.log('STATE: actx.currentTime', context.currentTime)\n        console.log('STATE: actx.state', context.state)\n      }\n\n      if (sourceNode) {\n        console.log('STATE: mix', sourceNode)\n      } else {\n        console.log('STATE: mix is undefined')\n      }\n    }\n\n    let updateDurations = async () => {\n      let displayDuration = getDuration()\n      let displayCurrentTime = getCurrentTime()\n\n      let progress = Math.round(displayCurrentTime / displayDuration * 100)\n      if (Number.isInteger(progress)) {\n        emit('updateProgressBar', progress)\n      }\n\n      if (displayCurrentTime > displayDuration) {\n        await stop()\n      }\n    }\n\n    setInterval(updateDurations, 100)\n\n    let downloadMix = () => {\n      toast.error('Not yet implemented :(');\n      return\n    }\n\n    ;(0,vue__WEBPACK_IMPORTED_MODULE_4__.watch)(() => bus.value.get('stopAllAudio'), async (callerId) => {\n      if (callerId != 'composer-controls') {\n        await stop()\n      }\n    })\n\n    ;(0,vue__WEBPACK_IMPORTED_MODULE_4__.watch)(() => bus.value.get('renderMixIfNeeded'), async (callerId) => {\n      if (store.state.hasStateChanged()) {\n        requiresRender.value = true\n\n        if (!isRendering.value) {\n          await renderMix()\n        }\n      } else {\n        requiresRender.value = false\n        // console.log('RENDER NOT NEEDED')\n      }\n    })\n\n    ;(0,vue__WEBPACK_IMPORTED_MODULE_4__.watch)(() => bus.value.get('scrubTo'), async (scrubToPercent) => {\n      if (store.state.clipCount() < 1) {\n        toast.warning('Add clips to the arranger!');\n        return\n      }\n\n      if (isPlaying.value && buffer && scrubToPercent && scrubToPercent > 0 && scrubToPercent <= 100) {\n        await pause()\n        await playMix(scrubToPercent)\n      } else {\n        // it is currently not playing, so start now\n        await playMix()\n        await pause()\n        await playMix(scrubToPercent)\n      }\n    })\n\n    return {\n      downloadMix,\n      imageAssets,\n      isPlaying,\n      isRendering,\n      play: playMix,\n      pause,\n      stop,\n      printPlayState,\n      renderMix,\n      requiresRender\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/components/ComposerControls.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/components/ComposerControls.vue?vue&type=template&id=6f452db4":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/components/ComposerControls.vue?vue&type=template&id=6f452db4 ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\");\n\n\nconst _hoisted_1 = { class: \"flex flex-col mt-4\" }\nconst _hoisted_2 = { class: \"flex w-full justify-center\" }\nconst _hoisted_3 = { class: \"w-1/3 flex items-center\" }\nconst _hoisted_4 = { class: \"flex w-full justify-center w-1/3\" }\nconst _hoisted_5 = [\"src\"]\nconst _hoisted_6 = [\"src\"]\nconst _hoisted_7 = [\"src\"]\nconst _hoisted_8 = { class: \"flex w-full justify-center w-1/3\" }\nconst _hoisted_9 = [\"src\"]\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_composer_controls_scroll_bar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"composer-controls-scroll-bar\")\n  const _component_global_track_values = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"global-track-values\")\n\n  return ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"div\", _hoisted_1, [\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_composer_controls_scroll_bar),\n    (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_2, [\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_3, [\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_global_track_values)\n      ]),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_4, [\n        ($setup.isPlaying === false)\n          ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"button\", {\n              key: 0,\n              class: \"m-4\",\n              onClick: _cache[0] || (_cache[0] = $event => ($setup.play()))\n            }, [\n              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"img\", {\n                src: $setup.imageAssets.playBtn,\n                class: \"h-24\"\n              }, null, 8 /* PROPS */, _hoisted_5)\n            ]))\n          : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"v-if\", true),\n        ($setup.isPlaying === true)\n          ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"button\", {\n              key: 1,\n              class: \"m-4\",\n              onClick: _cache[1] || (_cache[1] = $event => ($setup.pause()))\n            }, [\n              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"img\", {\n                src: $setup.imageAssets.pauseBtn,\n                class: \"h-24\"\n              }, null, 8 /* PROPS */, _hoisted_6)\n            ]))\n          : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"v-if\", true),\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"button\", {\n          class: \"m-4\",\n          onClick: _cache[2] || (_cache[2] = $event => ($setup.stop()))\n        }, [\n          (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"img\", {\n            src: $setup.imageAssets.stopBtn,\n            class: \"h-16\"\n          }, null, 8 /* PROPS */, _hoisted_7)\n        ])\n      ]),\n      (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"div\", _hoisted_8, [\n        ($setup.isPlaying === false)\n          ? ((0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementBlock)(\"button\", {\n              key: 0,\n              class: \"h-10 w-10 m-4\",\n              onClick: _cache[3] || (_cache[3] = $event => ($setup.downloadMix()))\n            }, [\n              (0,vue__WEBPACK_IMPORTED_MODULE_0__.createElementVNode)(\"img\", {\n                src: $setup.imageAssets.downloadBtn,\n                class: \"h-24\"\n              }, null, 8 /* PROPS */, _hoisted_9)\n            ]))\n          : (0,vue__WEBPACK_IMPORTED_MODULE_0__.createCommentVNode)(\"v-if\", true)\n      ])\n    ])\n  ]))\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[5].use[0]!./src/components/ComposerControls.vue?vue&type=template&id=6f452db4\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("71e99481acab202190db")
/******/ })();
/******/ 
/******/ }
);